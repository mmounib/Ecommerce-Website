generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id         String          @id @default(uuid())
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  email      String          @unique
  address    String?
  username   String
  hash       String?
  hashedRt   String?
  favourites FavouritesList?
  shopping   ShoppingList?
  orders     CardsList?
}

model category {
  id          String    @id @default(uuid())
  type        String    @unique
  description String
  products    Product[]
}

model Product {
  id               String              @id @unique
  title            String
  price            String
  image            String[]
  ImageDesc        String[]
  video            String?
  reviews          reviews[]
  base             skuBaseProducts[]
  props            skuProp[]
  CardsList        CardsProducts[]
  productFavourite FavouriteProducts[]
  productShopping  ShoppingProducts[]
  categoryId       String
  category         category            @relation(fields: [categoryId], references: [id])
}

model reviews {
  id        String   @id @default(uuid())
  Date      String
  content   String
  stars     Int
  images    String[]
  helpful   Int
  productId String
  Product   Product  @relation(fields: [productId], references: [id])
}

model FavouritesList {
  id      String              @id @default(uuid())
  userId  String              @unique
  product FavouriteProducts[]
  user    user                @relation(fields: [userId], references: [id])
}

model ShoppingList {
  id               String             @id @default(uuid())
  userId           String             @unique
  user             user               @relation(fields: [userId], references: [id])
  ShoppingProducts ShoppingProducts[]
}

model ShoppingProducts {
  id             String       @id @default(uuid())
  productId      String
  ShoppingListId String
  quantity       Int          @default(1)
  price          Float
  image          String
  ShoppingList   ShoppingList @relation(fields: [ShoppingListId], references: [id])
  product        Product      @relation(fields: [productId], references: [id])
}

model FavouriteProducts {
  favouriteId    String
  productId      String
  FavouritesList FavouritesList @relation(fields: [favouriteId], references: [id])
  Product        Product        @relation(fields: [productId], references: [id])

  @@id([productId, favouriteId])
}

model CardsProducts {
  CardsId   String
  productId String
  price     Float
  image     String
  quantity  Int       @default(1)
  CardsList CardsList @relation(fields: [CardsId], references: [id])
  Product   Product   @relation(fields: [productId], references: [id])

  @@id([productId, CardsId])
}

model CardsList {
  id        String          @id @default(uuid())
  userId    String          @unique
  createdAt DateTime        @default(now())
  product   CardsProducts[]
  user      user            @relation(fields: [userId], references: [id])
}

model skuBase {
  skuId          String            @id @default(uuid())
  propMap        String
  price          Float
  promotionPrice Float?
  quantity       Int
  ext            String
  products       skuBaseProducts[]
}

model skuBaseProducts {
  skuBaseId String
  productId String
  Product   Product @relation(fields: [productId], references: [id])
  skuBase   skuBase @relation(fields: [skuBaseId], references: [skuId])

  @@id([productId, skuBaseId])
}

model skuValues {
  id         String  @id @default(uuid())
  vid        Int
  name       String
  image      String?
  propTips   String
  skuPropPid String
  skuProp    skuProp @relation(fields: [skuPropPid], references: [id])
}

model skuProp {
  id        String      @id @default(uuid())
  pid       Int
  name      String
  productId String
  Product   Product     @relation(fields: [productId], references: [id])
  values    skuValues[]
}

model revocatedTokens {
  token String @id @unique
}
