// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String  @unique
  address  String?
  username String  @unique
  hash     String
  hashedRt String?

  cards      ShoppingList?
  favourites FavouritesList?
}

model category {
  id          Int    @id @default(autoincrement())
  type        String @unique
  description String

  products Product[]
}

model Product {
  id         String    @id @unique
  title      String
  price      String
  image      String[]
  ImageDesc  String[]
  video      String?
  base       skuBaseProducts[]
  props      skuProp[]
  reviews    reviews[]
  categoryId Int
  category   category  @relation(fields: [categoryId], references: [id])

  productFavourite FavouriteProducts[]
  productShopping  ShoppingProducts[]
  CardsList        CardsList[]
}

model reviews {
  id      Int      @id @default(autoincrement())
  Date    String
  content String
  stars   Int
  images  String[]
  helpful Int

  productId String
  Product   Product @relation(fields: [productId], references: [id])
}

model FavouritesList {
  id      Int                 @id @unique @default(autoincrement())
  userId  Int                 @unique
  user    user                @relation(fields: [userId], references: [id])
  product FavouriteProducts[]
}

model ShoppingList {
  id               Int                @id @unique @default(autoincrement())
  userId           Int                @unique
  user             user               @relation(fields: [userId], references: [id])
  product          CardsList[]
  ShoppingProducts ShoppingProducts[]
}

model CardsList {
  productId      String
  product        Product      @relation(fields: [productId], references: [id])
  ShoppingListId Int
  ShoppingList   ShoppingList @relation(fields: [ShoppingListId], references: [id])
  quantity       Int          @default(1)

  @@id([productId, ShoppingListId])
}

model FavouriteProducts {
  FavouritesList FavouritesList @relation(fields: [favouriteId], references: [id])
  favouriteId    Int

  Product   Product @relation(fields: [productId], references: [id])
  productId String

  @@id([productId, favouriteId])
}

model ShoppingProducts {
  ShoppingList ShoppingList @relation(fields: [ShoppingId], references: [id])
  ShoppingId   Int

  Product   Product @relation(fields: [productId], references: [id])
  productId String

  @@id([productId, ShoppingId])
}

model skuBase {
  skuId          String  @id @default(uuid())
  propMap        String
  price          Float
  promotionPrice Float?
  quantity       Int
  ext            String
  products      skuBaseProducts[]
}

model skuBaseProducts {
  skuBase skuBase @relation(fields: [skuBaseId], references: [skuId])
  skuBaseId   String

  Product   Product @relation(fields: [productId], references: [id])
  productId String

  @@id([productId, skuBaseId])
}

model skuValues {
  id       String  @id @default(uuid())
  vid      Int
  name     String  @unique
  image    String?
  propTips String

  skuProp    skuProp @relation(fields: [skuPropPid], references: [id])
  skuPropPid String
}

model skuProp {
  id        String      @id @default(uuid())
  pid       Int
  name      String
  values    skuValues[]
  Product   Product     @relation(fields: [productId], references: [id])
  productId String
}

model revocatedTokens {
  token String @id @unique
}
